# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Qf0Z0pxWtvQr6w9cRso28KQwE-9aVAJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import statsmodels.api as sm
from statsmodels.formula.api import ols

# Set style for plots
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (10, 6)

df = pd.read_csv("/content/StudentsPerformance.csv")

print(df.head())

print(df.info())

print(df.describe())



# Question (a): Hypothesis Testing


completed = df[df['test preparation course'] == 'completed']['math score']
not_completed = df[df['test preparation course'] == 'none']['math score']

t_stat, p_value = stats.ttest_ind(completed, not_completed, equal_var=False)
print("Math Score T-test:")
print(f"T-statistic: {t_stat:.4f}, P-value: {p_value:.4f}")


sns.histplot(completed, kde=True, color='blue', label='Completed', stat='density')
sns.histplot(not_completed, kde=True, color='orange', label='Not Completed', stat='density')
plt.title('Distribution of Math Scores')
plt.legend()
plt.show()

levene_stat, levene_p = stats.levene(completed, not_completed)
print(f"Leveneâ€™s Test P-value for Math Score Variance Equality: {levene_p:.4f}")

if p_value < 0.05:
    print("Conclusion: Reject the null hypothesis. Completing the test preparation course significantly affects math scores.")
else:
    print("Conclusion: Fail to reject the null hypothesis. No significant effect of the course on math scores.")


read_completed = df[df['test preparation course'] == 'completed']['reading score']
read_not_completed = df[df['test preparation course'] == 'none']['reading score']
t_read, p_read = stats.ttest_ind(read_completed, read_not_completed, equal_var=False)

write_completed = df[df['test preparation course'] == 'completed']['writing score']
write_not_completed = df[df['test preparation course'] == 'none']['writing score']
t_write, p_write = stats.ttest_ind(write_completed, write_not_completed, equal_var=False)

print(f"Reading Score T-test P-value: {p_read:.4f}")
print(f"Writing Score T-test P-value: {p_write:.4f}")

# Question (b): Correlation Analysis


correlation_matrix = df[["math score", "reading score", "writing score"]].corr()
print("\nCorrelation Matrix:")
print(correlation_matrix)


plt.figure(figsize=(6,4))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix of Scores")
plt.show()

strongest = correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool)).stack().idxmax()
print(f"\nStrongest positive correlation is between {strongest[0]} and {strongest[1]}")

print("\nNote: High correlations among predictors may indicate multicollinearity, especially between reading and writing scores.")

# Question (c): Linear Regression Modeling


import statsmodels.formula.api as smf


df['test_prep_encoded'] = df['test preparation course'].map({'none': 0, 'completed': 1})


model = smf.ols('Q("math score") ~ Q("reading score") + test_prep_encoded', data=df).fit()


print("\nRegression Model Summary:")
print(model.summary())

coef = model.params
print(f"\nInterpretation: Holding reading score constant, completing the test preparation course is associated with an increase of {coef['test_prep_encoded']:.2f} points in math score.")

residuals = model.resid
fitted = model.fittedvalues
sns.residplot(x=fitted, y=residuals, lowess=True, line_kws={'color': 'red'})
plt.xlabel('Fitted values')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.show()